def mergeSort(arr):
    if len(arr) > 1:
        leng = len(arr) // 2
        R = mergeSort(arr[:leng])
        L = mergeSort(arr[leng:])
        n, m , k = [0 for i in range(3)]
        while n < len(L) and m < len(R):
            if L[n] < R[m]:
                arr[k] = L[n]
                n += 1  
            else:
                arr[k] = R[m]
                m += 1
            k += 1
        while n < len(L):
            arr[k] = L[n]
            k += 1
            n += 1
        while m < len(R):
            arr[k] = R[m]
            k += 1
            m += 1
    return arr
def bubbleSort(arr):
    stat = True
    while stat:
        stat = False
        i = 0
        while i+1 < len(arr):
            if arr[i+1] < arr[i]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                i += 1
                stat = True
            else:
                i += 1
    return arr
def selectionSort(arr):
    n = len(arr)
    for i in range(n):
        temp = i
        for j in range(i+1,n):
            if arr[j] < arr[temp]:
                temp = j
        arr[i], arr[temp] = arr[temp], arr[i]
    return arr
def insertionSort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(i):
            if arr[j] > arr[i]:
                arr[i], arr[j] = arr[j], arr[i]
                break
    return arr
def quickSort(arr, low, high):
    if low < high:
        piv = partition(arr, low, high)
        quickSort(arr, low, piv-1)
        quickSort(arr, piv+1, high)
    return arr

def partition(arr, low, high):
    piv = arr[high]
    i = low - 1
    for j in range(low, high):
        if arr[j] <= piv:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]
    arr[i+1], arr[high] = arr[high], arr[i+1]
    return i + 1
    
